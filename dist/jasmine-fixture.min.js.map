{"version":3,"sources":["jasmine-fixture.js"],"names":["window","jasmineFixture","version","config","basePath","containerId","styleNodes","cache","clearCache","clearCSS","forEach","element","remove","clearHTML","getContainer","appendCSS","path","preload","appendStyle","readFromCache","appendHTML","appendToContainer","loadCSS","loadHTML","loadIntoContainer","jQuery","type","fullUrl","assembleUrl","readIntoCache","read","setup","options","extend","length","css","cssNode","text","push","append","html","currentContainer","find","container","attr","empty","url","ajax","async","done","data","fail","jqXHR","status","afterEach"],"mappings":";;;;;AACA,GAAA,oBAAA,OACA,KAAA,6BADA,IAAAA,OAAA,iBACAA,OAAAC,mBAUA,WACA,aAEAA,eAAAC,QAAA,MAKA,IAAAC,QACAC,SAAA,YACAC,YAAA,oBAMAC,cAKAL,eAAAM,SAEAN,eAAAO,WAAA,WACAP,eAAAM,UAGAN,eAAAQ,SAAA,WACAH,WAAAI,QAAA,SAAAC,SACAA,QAAAC,YAIAX,eAAAY,UAAA,WACAC,eAAAF,UAMAX,eAAAc,UAAA,SAAAC,MACAf,eAAAgB,QAAAD,MACAE,YAAAC,cAAAH,QAMAf,eAAAmB,WAAA,SAAAJ,MACAf,eAAAgB,QAAAD,MACAK,kBAAAF,cAAAH,QAMAf,eAAAqB,QAAA,SAAAN,MACAf,eAAAgB,QAAAD,MACAf,eAAAQ,WACAS,YAAAC,cAAAH,QAMAf,eAAAsB,SAAA,SAAAP,MACAf,eAAAgB,QAAAD,MACAQ,kBAAAL,cAAAH,QAMAf,eAAAgB,QAAA,SAAAD,MACA,WAAAS,OAAAC,KAAAV,QACAA,MAAAA,OAEAA,KAAAN,QAAA,SAAAC,SACA,IAAAgB,QAAAC,YAAAjB,SACA,cAAAc,OAAAC,KAAAzB,eAAAM,MAAAoB,WACAE,cAAAF,YASA1B,eAAA6B,KAAA,SAAAd,MAEA,OADAf,eAAAgB,QAAAD,MACAG,cAAAH,OAQAf,eAAA8B,MAAA,SAAAC,SAMA,OALAP,OAAAQ,OAAA9B,OAAA6B,SAEA,MAAA7B,OAAAC,SAAAD,OAAAC,SAAA8B,OAAA,KACA/B,OAAAC,UAAA,KAEAD,QAMA,IAAAe,YAAA,SAAAiB,KACA,IAAAC,QAAAX,OAAA,WACAW,QAAAC,KAAAF,KACA7B,WAAAgC,KAAAF,SACAX,OAAA,QAAAc,OAAAH,UAMAf,kBAAA,SAAAmB,MACA1B,eACAyB,OAAAC,OAOAZ,YAAA,SAAAZ,MACA,OAAAb,OAAAC,SAAAY,MAMAF,aAAA,WACA,IAAA2B,iBAAAhB,OAAA,QAAAiB,KAAA,IAAAvC,OAAAE,aACA,GAAA,IAAAoC,iBAAAP,OACA,OAAAO,iBAGA,IAAAE,UAAAlB,OAAA,SAGA,OAFAkB,UAAAC,KAAA,KAAAzC,OAAAE,aACAoB,OAAA,QAAAc,OAAAI,WACAA,WAOAnB,kBAAA,SAAAgB,MACA,IAAAG,UAAA7B,eACA6B,UAAAE,QACAF,UAAAJ,OAAAC,OAOArB,cAAA,SAAAH,MACA,OAAAf,eAAAM,MAAAqB,YAAAZ,QAMAa,cAAA,SAAAiB,KACArB,OAAAsB,MACAD,IAAAA,IACAE,OAAA,EACAzC,OAAA,IACA0C,KAAA,SAAAC,MACAjD,eAAAM,MAAAuC,KAAAI,OACAC,KAAA,SAAAC,OACA,KAAA,kCAAAN,IAAA,aAAAM,MAAAC,OAAA,OAlLA,GAwLAC,UAAA,WACA,aACArD,eAAAQ,WACAR,eAAAY","file":"jasmine-fixture.min.js","sourcesContent":["/* istanbul ignore if */\r\nif(typeof(jQuery) === \"undefined\"){\r\n\tthrow(\"Unable to find jQuery\");\r\n}\r\n\r\n/* istanbul ignore else */\r\nif(typeof(window.jasmineFixture) === \"undefined\"){\r\n\twindow.jasmineFixture = {};\r\n}\r\n\r\n/**\r\n * @typedef {Object} jasmineFixture.options\r\n *\r\n * @property {String} basePath        Base path for fixtures. Default to \"fixtures/\"\r\n * @property {String} containerId     Used as id attribute for the <div> where fixtures are loaded. Default to \"jasmine-fixtures\"\r\n */\r\n\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\tjasmineFixture.version = \"0.1\";\r\n\r\n\t/**\r\n\t * @type {jasmineFixture.options}\r\n\t */\r\n\tvar config = {\r\n\t\tbasePath: \"fixtures/\",\r\n\t\tcontainerId: \"jasmine-fixtures\"\r\n\t};\r\n\r\n\t/**\r\n\t * @type {Array.<JQuery>}\r\n\t */\r\n\tvar styleNodes = [];\r\n\r\n\t/**\r\n\t * @type {Object.<String, String>}\r\n\t */\r\n\tjasmineFixture.cache = {};\r\n\r\n\tjasmineFixture.clearCache = function(){\r\n\t\tjasmineFixture.cache = {};\r\n\t};\r\n\r\n\tjasmineFixture.clearCSS = function(){\r\n\t\tstyleNodes.forEach(function(element){\r\n\t\t\telement.remove();\r\n\t\t});\r\n\t};\r\n\r\n\tjasmineFixture.clearHTML = function(){\r\n\t\tgetContainer().remove();\r\n\t};\r\n\r\n\t/**\r\n\t * @param {String} path\r\n\t */\r\n\tjasmineFixture.appendCSS = function(path){\r\n\t\tjasmineFixture.preload(path);\r\n\t\tappendStyle(readFromCache(path));\r\n\t};\r\n\r\n\t/**\r\n\t * @param {String} path\r\n\t */\r\n\tjasmineFixture.appendHTML = function(path){\r\n\t\tjasmineFixture.preload(path);\r\n\t\tappendToContainer(readFromCache(path));\r\n\t};\r\n\r\n\t/**\r\n\t * @param {String} path\r\n\t */\r\n\tjasmineFixture.loadCSS = function(path){\r\n\t\tjasmineFixture.preload(path);\r\n\t\tjasmineFixture.clearCSS();\r\n\t\tappendStyle(readFromCache(path));\r\n\t};\r\n\r\n\t/**\r\n\t * @param {String} path\r\n\t */\r\n\tjasmineFixture.loadHTML = function(path){\r\n\t\tjasmineFixture.preload(path);\r\n\t\tloadIntoContainer(readFromCache(path));\r\n\t};\r\n\r\n\t/**\r\n\t * @param {String|Array.<String>} path\r\n\t */\r\n\tjasmineFixture.preload = function(path){\r\n\t\tif(jQuery.type(path) === \"string\"){\r\n\t\t\tpath = [path];\r\n\t\t}\r\n\t\tpath.forEach(function(element){\r\n\t\t\tvar fullUrl = assembleUrl(element);\r\n\t\t\tif(jQuery.type(jasmineFixture.cache[fullUrl]) === \"undefined\"){\r\n\t\t\t\treadIntoCache(fullUrl);\r\n\t\t\t}\r\n\t\t});\r\n\t};\r\n\r\n\t/**\r\n\t * @param {String} path\r\n\t * @return {String|Object}\r\n\t */\r\n\tjasmineFixture.read = function(path){\r\n\t\tjasmineFixture.preload(path);\r\n\t\treturn readFromCache(path);\r\n\t};\r\n\r\n\t/**\r\n\t * ChangeÂ¨/retrieve current configuration\r\n\t * @param {jasmineFixture.options} [options]\r\n\t * @return {jasmineFixture.options}\r\n\t */\r\n\tjasmineFixture.setup = function(options){\r\n\t\tjQuery.extend(config, options);\r\n\t\t// Ensure we always have a trailing slash\r\n\t\tif(config.basePath[config.basePath.length - 1] !== \"/\"){\r\n\t\t\tconfig.basePath += \"/\";\r\n\t\t}\r\n\t\treturn config;\r\n\t};\r\n\r\n\t/**\r\n\t * @param {String} css\r\n\t */\r\n\tvar appendStyle = function(css){\r\n\t\tvar cssNode = jQuery(\"<style>\");\r\n\t\tcssNode.text(css);\r\n\t\tstyleNodes.push(cssNode);\r\n\t\tjQuery(\"head\").append(cssNode);\r\n\t};\r\n\r\n\t/**\r\n\t * @param {String} html\r\n\t */\r\n\tvar appendToContainer = function(html){\r\n\t\tvar container = getContainer();\r\n\t\tcontainer.append(html);\r\n\t};\r\n\r\n\t/**\r\n\t * @param {String} path\r\n\t * @return {String}\r\n\t */\r\n\tvar assembleUrl = function(path){\r\n\t\treturn config.basePath + path;\r\n\t};\r\n\r\n\t/**\r\n\t * @return {JQuery}\r\n\t */\r\n\tvar getContainer = function(){\r\n\t\tvar currentContainer = jQuery(\"body\").find(\"#\" + config.containerId);\r\n\t\tif(currentContainer.length !== 0){\r\n\t\t\treturn currentContainer;\r\n\t\t}\r\n\t\telse{\r\n\t\t\tvar container = jQuery(\"<div>\");\r\n\t\t\tcontainer.attr(\"id\", config.containerId);\r\n\t\t\tjQuery(\"body\").append(container);\r\n\t\t\treturn container;\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * @param {String} html\r\n\t */\r\n\tvar loadIntoContainer = function(html){\r\n\t\tvar container = getContainer();\r\n\t\tcontainer.empty();\r\n\t\tcontainer.append(html);\r\n\t};\r\n\r\n\t/**\r\n\t * @param {String} path\r\n\t * @return {String|Object}\r\n\t */\r\n\tvar readFromCache = function(path) {\r\n\t\treturn jasmineFixture.cache[assembleUrl(path)];\r\n\t};\r\n\r\n\t/**\r\n\t * @param {String} url\r\n\t */\r\n\tvar readIntoCache = function(url){\r\n\t\tjQuery.ajax({\r\n\t\t\turl: url,\r\n\t\t\tasync: false, // Must be synchronous to ensure fixtures are loaded before test run\r\n\t\t\tcache: false\r\n\t\t}).done(function(data){\r\n\t\t\tjasmineFixture.cache[url] = data;\r\n\t\t}).fail(function(jqXHR){\r\n\t\t\tthrow (\"Failed to retrieve fixture at: \" + url + \" (status: \" + jqXHR.status + \")\");\r\n\t\t});\r\n\t};\r\n\r\n}());\r\n\r\nafterEach(function(){\r\n\t\"use strict\";\r\n\tjasmineFixture.clearCSS();\r\n\tjasmineFixture.clearHTML();\r\n});"],"sourceRoot":"."}